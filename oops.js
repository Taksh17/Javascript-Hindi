//object is nothing but collection of properties and methods
//parts of object:-
//object literals.
//constructor function:-
/* 
To call a function like a constructor in JavaScript, you use the new keyword âœ…
Your example updated:
function Person(name) {
  this.name = name;
}
const p1 = new Person("Alice");   // ðŸ‘ˆ called with new
console.log(p1);                  
console.log(p1.name);
ðŸ”Ž What happens here:
new Person("Alice")
Creates a new empty object â†’ {}
Sets this inside Person to point to that new object
Assigns this.name = "Alice" â†’ { name: "Alice" }
Returns the object automatically
So now:
p1 will be an object:
Person { name: "Alice" }
p1.name â†’ "Alice"
âœ… Output will be:
Person { name: 'Alice' }
Alice
âš¡ Tip:
Thatâ€™s exactly how constructor functions are meant to be used.
If you forget new, the function acts like a normal function and doesnâ€™t construct an object.
*/
